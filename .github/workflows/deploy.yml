name: Deploy Ram Naam Jaap Application

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          
      - name: Run tests
        run: |
          python manage.py test
          
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          
      - name: Set up known hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
      
      - name: Deploy to production server
        run: |
          # Add server to known hosts
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
          
          # Create deployment directory structure if needed
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "mkdir -p /home/${{ secrets.SSH_USER }}/ram_naam_jaap"
          
          # Copy repository files to server
          rsync -avz --exclude='.git' --exclude='venv' --exclude='__pycache__' \
            --exclude='*.pyc' --exclude='.env*' --exclude='media' ./ \
            ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:/home/${{ secrets.SSH_USER }}/ram_naam_jaap/
          
          # Copy production environment file
          scp .env-pro ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:/home/${{ secrets.SSH_USER }}/ram_naam_jaap/.env
          
          # Execute deployment commands on the server
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "cd /home/${{ secrets.SSH_USER }}/ram_naam_jaap && \
            python -m venv venv && \
            source venv/bin/activate && \
            pip install -r requirements.txt && \
            pip install gunicorn psycopg2-binary && \
            python manage.py migrate && \
            python manage.py collectstatic --noinput && \
            sudo supervisorctl restart ram_naam_jaap"
      
      - name: Send deployment notification
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: Ram Naam Jaap Deployment
          SLACK_MESSAGE: 'Deployment ${{ job.status }}' 