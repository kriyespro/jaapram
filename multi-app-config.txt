# Multi-Application Django Setup Guide

This document outlines how to set up multiple Django applications that share resources and configuration for deployment on the ramjaap.in domain.

## 1. Project Structure

```
/var/www/ramjaap.in/
├── ram_naam_jaap/          # Main application
│   ├── manage.py
│   ├── ram_naam_jaap/      # Project settings
│   ├── core/               # Main app features
│   └── ... other apps
├── blog/                   # Blog application (example secondary app)
│   ├── manage.py
│   ├── blog_project/       # Project settings
│   └── blog_app/           # Blog app features
├── meditation/             # Meditation application (example tertiary app)
│   ├── manage.py
│   └── ...
├── shared/                 # Shared resources
│   ├── templates/          # Common templates
│   ├── static/             # Common static files
│   └── utils/              # Shared Python utilities
├── venv/                   # Shared virtual environment
├── static/                 # Collected static files for all apps
├── media/                  # Media files for all apps
└── logs/                   # Log files
```

## 2. Shared Settings

### 2.1 Create a Shared Settings Module

Create a `shared_settings.py` file in a common location that can be imported by all applications:

```python
# /var/www/ramjaap.in/shared/shared_settings.py

import os
from pathlib import Path

# Base paths
BASE_DIR = Path('/var/www/ramjaap.in')
SHARED_DIR = BASE_DIR / 'shared'

# Common settings
DEBUG = False
ALLOWED_HOSTS = ['ramjaap.in', 'www.ramjaap.in', 'blog.ramjaap.in', 'meditation.ramjaap.in']

# Security settings
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'default-key-for-development-only')
SECURE_SSL_REDIRECT = True
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
SECURE_HSTS_SECONDS = 31536000  # 1 year
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True

# Database settings (shared database)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('DB_NAME', 'ramjaap'),
        'USER': os.environ.get('DB_USER', 'ramjaap_user'),
        'PASSWORD': os.environ.get('DB_PASSWORD', ''),
        'HOST': os.environ.get('DB_HOST', 'localhost'),
        'PORT': os.environ.get('DB_PORT', '5432'),
    }
}

# Static and media settings
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'static'
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Additional shared static directories for development
STATICFILES_DIRS = [
    SHARED_DIR / 'static',
]

# Template settings
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.jinja2.Jinja2',
        'DIRS': [
            SHARED_DIR / 'templates',
        ],
        'OPTIONS': {
            'environment': 'config.jinja2.environment',
        },
    },
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            SHARED_DIR / 'templates',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Shared authentication settings
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'Asia/Kolkata'
USE_I18N = True
USE_TZ = True

# Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'django.log',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}

# Cache settings
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.PyMemcacheCache',
        'LOCATION': '127.0.0.1:11211',
    }
}

# Email settings
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.example.com')
EMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.environ.get('EMAIL_USER', '')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_PASSWORD', '')
DEFAULT_FROM_EMAIL = 'noreply@ramjaap.in'
```

### 2.2 Import Shared Settings in Each App

In each application's settings file, import the shared settings and extend them:

```python
# Example for main app: /var/www/ramjaap.in/ram_naam_jaap/ram_naam_jaap/settings.py

import sys
import os
from pathlib import Path

# Add shared folder to Python path
sys.path.insert(0, '/var/www/ramjaap.in/shared')

# Import shared settings
from shared_settings import *

# Application-specific settings
BASE_DIR = Path(__file__).resolve().parent.parent
APP_NAME = 'ram_naam_jaap'

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Local apps
    'core',
    'users',
    # ... other app-specific apps
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = f'{APP_NAME}.urls'
WSGI_APPLICATION = f'{APP_NAME}.wsgi.application'

# Add app-specific template directories
TEMPLATES[0]['DIRS'] = [BASE_DIR / 'templates'] + TEMPLATES[0]['DIRS']
TEMPLATES[1]['DIRS'] = [BASE_DIR / 'templates'] + TEMPLATES[1]['DIRS']

# Add app-specific static directories
STATICFILES_DIRS = [BASE_DIR / 'static'] + list(STATICFILES_DIRS)

# Customize admin
ADMIN_URL = 'durga/'  # Custom admin URL

# App-specific logging
LOGGING['loggers'][APP_NAME] = {
    'handlers': ['file'],
    'level': 'INFO',
    'propagate': True,
}
```

## 3. Supervisor Configuration for Multiple Apps

Set up Supervisor to manage all applications:

```ini
; /etc/supervisor/conf.d/ramjaap.conf

[group:ramjaap]
programs=main_app,blog_app,meditation_app

[program:main_app]
command=/var/www/ramjaap.in/venv/bin/gunicorn --workers 3 --bind unix:/var/www/ramjaap.in/main.sock ram_naam_jaap.wsgi:application
directory=/var/www/ramjaap.in/ram_naam_jaap
user=appuser
autostart=true
autorestart=true
environment=DJANGO_SETTINGS_MODULE="ram_naam_jaap.settings"

[program:blog_app]
command=/var/www/ramjaap.in/venv/bin/gunicorn --workers 2 --bind unix:/var/www/ramjaap.in/blog.sock blog_project.wsgi:application
directory=/var/www/ramjaap.in/blog
user=appuser
autostart=true
autorestart=true
environment=DJANGO_SETTINGS_MODULE="blog_project.settings"

[program:meditation_app]
command=/var/www/ramjaap.in/venv/bin/gunicorn --workers 2 --bind unix:/var/www/ramjaap.in/meditation.sock meditation_project.wsgi:application
directory=/var/www/ramjaap.in/meditation
user=appuser
autostart=true
autorestart=true
environment=DJANGO_SETTINGS_MODULE="meditation_project.settings"
```

## 4. Setting Up Shared Authentication

To allow users to seamlessly move between applications with a single login:

```python
# /var/www/ramjaap.in/shared/auth_middleware.py

from django.conf import settings
from django.contrib.auth.models import AnonymousUser
from django.contrib.auth import get_user_model
import jwt
from datetime import datetime

User = get_user_model()

class SharedAuthMiddleware:
    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        # Check if user is already authenticated through Django's session
        if request.user.is_authenticated:
            return self.get_response(request)
            
        # Try to authenticate via shared JWT token in cookie
        token = request.COOKIES.get('shared_auth_token')
        if token:
            try:
                payload = jwt.decode(
                    token, 
                    settings.SECRET_KEY, 
                    algorithms=['HS256']
                )
                user_id = payload.get('user_id')
                exp = payload.get('exp')
                
                # Check if token is expired
                if exp and datetime.fromtimestamp(exp) > datetime.now():
                    try:
                        user = User.objects.get(pk=user_id)
                        request.user = user
                    except User.DoesNotExist:
                        pass
            except jwt.PyJWTError:
                pass
                
        return self.get_response(request)
```

Add this middleware to each application's settings:

```python
MIDDLEWARE = [
    # ... other middleware
    'shared.auth_middleware.SharedAuthMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    # ... other middleware
]
```

## 5. Shared Template Inheritance

Create a base template that can be extended by all applications:

```html
<!-- /var/www/ramjaap.in/shared/templates/base.jinja -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Ram Naam Jaap{% endblock %}</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css">
    <script src="https://cdn.jsdelivr.net/npm/alpinejs@3.10.3/dist/cdn.min.js" defer></script>
    <link rel="stylesheet" href="{{ static('css/common.css') }}">
    {% block extra_css %}{% endblock %}
</head>
<body class="bg-gray-100 font-sans leading-normal tracking-normal">
    <header class="bg-orange-600 text-white">
        <nav class="container mx-auto flex flex-wrap p-4">
            <div class="flex w-full md:w-1/2 justify-between md:justify-start">
                <a href="https://ramjaap.in" class="text-xl font-bold">Ram Naam Jaap</a>
                <div class="md:hidden">
                    <button x-data="{open: false}" @click="open = !open" 
                            class="p-2 focus:outline-none">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7" />
                        </svg>
                    </button>
                </div>
            </div>
            <div class="w-full md:flex md:w-1/2 md:justify-end">
                <ul class="md:flex md:items-center hidden space-x-4">
                    <li><a href="https://ramjaap.in" class="hover:underline">Home</a></li>
                    <li><a href="https://blog.ramjaap.in" class="hover:underline">Blog</a></li>
                    <li><a href="https://meditation.ramjaap.in" class="hover:underline">Meditation</a></li>
                    {% if user.is_authenticated %}
                        <li><a href="/profile" class="hover:underline">Profile</a></li>
                        <li><a href="/logout" class="hover:underline">Logout</a></li>
                    {% else %}
                        <li><a href="/login" class="hover:underline">Login</a></li>
                    {% endif %}
                </ul>
            </div>
        </nav>
    </header>

    <main class="container mx-auto p-4">
        {% block content %}{% endblock %}
    </main>

    <footer class="bg-gray-800 text-white py-6">
        <div class="container mx-auto px-4">
            <div class="flex flex-wrap">
                <div class="w-full md:w-1/3 mb-4 md:mb-0">
                    <h3 class="text-lg font-bold mb-2">Ram Naam Jaap</h3>
                    <p>Experience the spiritual journey through our integrated platforms.</p>
                </div>
                <div class="w-full md:w-1/3 mb-4 md:mb-0">
                    <h3 class="text-lg font-bold mb-2">Quick Links</h3>
                    <ul>
                        <li><a href="https://ramjaap.in/about" class="hover:underline">About Us</a></li>
                        <li><a href="https://ramjaap.in/contact" class="hover:underline">Contact</a></li>
                        <li><a href="https://ramjaap.in/privacy" class="hover:underline">Privacy Policy</a></li>
                    </ul>
                </div>
                <div class="w-full md:w-1/3">
                    <h3 class="text-lg font-bold mb-2">Connect With Us</h3>
                    <div class="flex space-x-4">
                        <a href="#" class="hover:text-orange-400">
                            <svg class="h-6 w-6" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z"/>
                            </svg>
                        </a>
                        <a href="#" class="hover:text-orange-400">
                            <svg class="h-6 w-6" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z"/>
                            </svg>
                        </a>
                    </div>
                </div>
            </div>
            <div class="mt-6 text-center">
                <p>&copy; {{ now().year }} Ram Naam Jaap. All rights reserved.</p>
            </div>
        </div>
    </footer>

    <script src="{{ static('js/common.js') }}"></script>
    {% block extra_js %}{% endblock %}
</body>
</html>
```

## 6. Deploying Multiple Applications with a Single Domain

1. **Update the Production Settings for Each App**

For each application, ensure the production settings have the correct domain configurations:

```python
# Example for blog app settings
ALLOWED_HOSTS = ['ramjaap.in', 'www.ramjaap.in', 'blog.ramjaap.in']
CSRF_TRUSTED_ORIGINS = ['https://ramjaap.in', 'https://www.ramjaap.in', 'https://blog.ramjaap.in']
```

2. **Nginx Configuration for Multiple Apps**

```nginx
# Main server block for the primary domain
server {
    listen 443 ssl http2;
    server_name ramjaap.in www.ramjaap.in;
    
    # SSL configuration
    ssl_certificate /etc/letsencrypt/live/ramjaap.in/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/ramjaap.in/privkey.pem;
    
    # Main application
    location / {
        proxy_pass http://unix:/var/www/ramjaap.in/main.sock;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Static and media files for all applications
    location /static/ {
        alias /var/www/ramjaap.in/static/;
        expires 30d;
    }
    
    location /media/ {
        alias /var/www/ramjaap.in/media/;
        expires 30d;
    }
}

# Blog subdomain
server {
    listen 443 ssl http2;
    server_name blog.ramjaap.in;
    
    # Reuse the main domain's SSL certificate (SAN certificate)
    ssl_certificate /etc/letsencrypt/live/ramjaap.in/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/ramjaap.in/privkey.pem;
    
    # Blog application
    location / {
        proxy_pass http://unix:/var/www/ramjaap.in/blog.sock;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Use the same static and media files as the main domain
    location /static/ {
        alias /var/www/ramjaap.in/static/;
        expires 30d;
    }
    
    location /media/ {
        alias /var/www/ramjaap.in/media/;
        expires 30d;
    }
}

# Meditation subdomain
server {
    listen 443 ssl http2;
    server_name meditation.ramjaap.in;
    
    # Reuse the main domain's SSL certificate
    ssl_certificate /etc/letsencrypt/live/ramjaap.in/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/ramjaap.in/privkey.pem;
    
    # Meditation application
    location / {
        proxy_pass http://unix:/var/www/ramjaap.in/meditation.sock;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Use the same static and media files
    location /static/ {
        alias /var/www/ramjaap.in/static/;
        expires 30d;
    }
    
    location /media/ {
        alias /var/www/ramjaap.in/media/;
        expires 30d;
    }
}

# HTTP to HTTPS redirect for all domains
server {
    listen 80;
    server_name ramjaap.in www.ramjaap.in blog.ramjaap.in meditation.ramjaap.in;
    return 301 https://$host$request_uri;
}
```

## 7. Deployment Steps

1. **Set up DNS for all domains/subdomains**
   - Add A records for `ramjaap.in` and `www.ramjaap.in`
   - Add CNAME records for `blog.ramjaap.in` and `meditation.ramjaap.in` pointing to `ramjaap.in`

2. **Obtain SSL certificates**
   ```bash
   certbot --nginx -d ramjaap.in -d www.ramjaap.in -d blog.ramjaap.in -d meditation.ramjaap.in
   ```

3. **Clone or update all repositories**
   ```bash
   cd /var/www/ramjaap.in
   git clone https://github.com/yourusername/ram-naam-jaap.git
   git clone https://github.com/yourusername/blog.git
   git clone https://github.com/yourusername/meditation.git
   ```

4. **Set up virtual environment**
   ```bash
   python3 -m venv venv
   source venv/bin/activate
   pip install -r ram_naam_jaap/requirements.txt
   pip install -r blog/requirements.txt
   pip install -r meditation/requirements.txt
   pip install gunicorn psycopg2-binary
   ```

5. **Run migrations for all applications**
   ```bash
   # Main app
   cd /var/www/ramjaap.in/ram_naam_jaap
   python manage.py migrate
   
   # Blog app
   cd /var/www/ramjaap.in/blog
   python manage.py migrate
   
   # Meditation app
   cd /var/www/ramjaap.in/meditation
   python manage.py migrate
   ```

6. **Collect static files from all applications**
   ```bash
   # Main app (with --clear to clean the static directory)
   cd /var/www/ramjaap.in/ram_naam_jaap
   python manage.py collectstatic --noinput --clear
   
   # Blog app (without --clear to preserve existing files)
   cd /var/www/ramjaap.in/blog
   python manage.py collectstatic --noinput
   
   # Meditation app
   cd /var/www/ramjaap.in/meditation
   python manage.py collectstatic --noinput
   ```

7. **Configure and restart Supervisor and Nginx**
   ```bash
   supervisorctl reread
   supervisorctl update
   supervisorctl restart ramjaap:*
   systemctl restart nginx
   ```

## 8. Managing Shared Data

If your applications need to share data like users or other models:

1. **Database Router for Multi-DB Setup**

```python
# /var/www/ramjaap.in/shared/db_router.py

class SharedRouter:
    """
    A router to control all database operations on models in shared applications
    """
    def db_for_read(self, model, **hints):
        """
        All read operations go to the primary database
        """
        return 'default'

    def db_for_write(self, model, **hints):
        """
        All write operations go to the primary database
        """
        return 'default'

    def allow_relation(self, obj1, obj2, **hints):
        """
        Allow relations between objects in shared apps
        """
        return True

    def allow_migrate(self, db, app_label, model_name=None, **hints):
        """
        Make sure shared models only appear in the 'default' database
        """
        if app_label in ['auth', 'contenttypes', 'sessions', 'admin', 'shared_models']:
            return db == 'default'
        return None
```

2. **Shared Models App**

Create a separate Django app for shared models that can be imported by all applications:

```python
# /var/www/ramjaap.in/shared/models.py

from django.db import models
from django.contrib.auth.models import User

class SharedProfile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    avatar = models.ImageField(upload_to='profiles/', null=True, blank=True)
    bio = models.TextField(blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    def __str__(self):
        return self.user.username
        
class SharedSetting(models.Model):
    key = models.CharField(max_length=100, unique=True)
    value = models.TextField()
    description = models.TextField(blank=True)
    
    def __str__(self):
        return self.key
```

## 9. Maintenance Commands

Create a management script to simplify maintenance tasks across all applications:

```bash
#!/bin/bash
# /var/www/ramjaap.in/manage_all.sh

source venv/bin/activate

APPS=("ram_naam_jaap" "blog" "meditation")
ACTION=$1
PARAMS=${@:2}

function run_command() {
    local app=$1
    local cmd=$2
    local params=$3
    echo "Running '$cmd $params' for $app..."
    cd /var/www/ramjaap.in/$app
    python manage.py $cmd $params
    echo "Done with $app"
    echo "-------------------"
}

for app in "${APPS[@]}"; do
    run_command $app $ACTION "$PARAMS"
done

echo "All operations completed!"
```

Make it executable:
```bash
chmod +x /var/www/ramjaap.in/manage_all.sh
```

Example usage:
```bash
# Migrate all applications
./manage_all.sh migrate

# Collect static files for all applications
./manage_all.sh collectstatic --noinput

# Clear cache for all applications
./manage_all.sh clear_cache
```

## 10. Monitoring and Logging

Configure central logging for all applications:

```bash
# Install ELK Stack or a simpler solution like Promtail + Loki + Grafana
apt-get install -y promtail

# Configure Promtail to ship logs from all applications
cat > /etc/promtail/config.yml << EOF
server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /var/lib/promtail/positions.yaml

clients:
  - url: http://your-loki-instance:3100/loki/api/v1/push

scrape_configs:
  - job_name: django_logs
    static_configs:
      - targets:
          - localhost
        labels:
          job: djangologs
          __path__: /var/www/ramjaap.in/logs/*.log
          host: ramjaap
EOF

# Start Promtail
systemctl restart promtail
```

## Conclusion

This multi-application setup allows for:

1. **Shared Resources**: Common templates, static files, and settings
2. **Efficient Deployment**: Single domain with subdomains for different applications
3. **Unified Authentication**: Users can move between applications seamlessly
4. **Centralized Management**: Single point for maintenance and updates
5. **Scalability**: Easy to add new applications without duplicating infrastructure

To add a new application to this setup, follow the same pattern of importing shared settings, configuring Nginx for the new subdomain, and updating the Supervisor configuration. 